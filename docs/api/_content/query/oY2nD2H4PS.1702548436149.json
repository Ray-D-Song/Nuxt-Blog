{"_path":"/1694340688292","_dir":"","_draft":false,"_partial":false,"_locale":"","_empty":false,"title":"单线程并发","description":"小短文, 讨论单线程并发和 node.js 这样异步协程模型的优势","cover":"https://pic-base-1307984077.cos.ap-nanjing.myqcloud.com/202309092206004.png","body":{"type":"root","children":[{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"本文封面和思路来源于 Ruby China 2021 By 东仙队长的分享: "},{"type":"element","tag":"a","props":{"href":"https://www.bilibili.com/video/BV1h3411v7kq/?spm_id_from=333.999.0.0&vd_source=371668a779fa4a755fcbf62901a22d71","rel":["nofollow"]},"children":[{"type":"text","value":"Ruby 高并发编程指北"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在"},{"type":"element","tag":"a","props":{"href":"https://ray-d-song.com/post/1694247812862","rel":["nofollow"]},"children":[{"type":"text","value":"并发与并行"}]},{"type":"text","value":"这篇文章中, 我假设了只有一个处理器, 这颗处理器只有一个核心的情况.\n在这种情况下, 计算机同一时间只能处理一个任务. 那么如何将这个线程利用率最大化就是"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"「单线程并发」"}]},{"type":"text","value":"的课题."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"首先我们来看看最常见的 web 应用场景, 从接收到用户请求到返回, 需要这些步骤:\n"},{"type":"element","tag":"img","props":{"alt":"web app","src":"https://pic-base-1307984077.cos.ap-nanjing.myqcloud.com/202309092334861.png"},"children":[]},{"type":"text","value":"\n其中"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"DB operation"}]},{"type":"text","value":"占据了最大的空间, 因为数据库操作确实是最耗时的操作."}]},{"type":"element","tag":"h1","props":{"id":"多线程并发"},"children":[{"type":"text","value":"多线程并发"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我们来假设一种极端的情况, 如果一直只有一个线程在运行, 那么运行过程就会变成这样:\n"},{"type":"element","tag":"img","props":{"alt":"单线程","src":"https://pic-base-1307984077.cos.ap-nanjing.myqcloud.com/202309092339287.png"},"children":[]},{"type":"text","value":"\n如果是这样的话, 我想我们这台单核的机器没几个用户就 burn out 了.\n应对这种情况, 最简单的思路就是多开几个线程, 虽然我们只有一个进程, 但当第一个线程卡在数据库操作时, 可以将控制权转移到其他线程进行操作.\n"},{"type":"element","tag":"img","props":{"alt":"多线程","src":"https://pic-base-1307984077.cos.ap-nanjing.myqcloud.com/202309092351360.png"},"children":[]}]},{"type":"element","tag":"h1","props":{"id":"协程"},"children":[{"type":"text","value":"协程"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"多线程并发, 一切看起来都很美好, 但有两个问题, 一个是计算机能启动的线程数量是有限的, 还有就是线程的切换有着客观的成本.\n那么如果我们可以自己在程序中"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"模拟线程"}]},{"type":"text","value":", 切换的不再是线程, 而是执行的程序方法. 岂不是可以用极低的成本去并发?\n这个模拟线程, 或者说"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"轻量线程/用户线程"}]},{"type":"text","value":", 就是协程.\n有了协程, 我们可以更细粒度的控制程序的执行. 以下是 node.js 协程(async异步)的例子:"}]},{"type":"element","tag":"code","props":{"className":["language-js"],"code":"async function App(request, response) {\n  const id = request.query.id // <- read req and parsing\n  try {\n    const result = await DB.find({ id }) // <- DB operation\n    res.json({ // generate json and response\n      code: 200,\n      data: result\n    })\n  } catch(e) {\n    // ...\n  }\n}\n","language":"js","meta":""},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{"class":"ct-984823"},"children":[{"type":"text","value":"async"}]},{"type":"element","tag":"span","props":{"class":"ct-212337"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-984823"},"children":[{"type":"text","value":"function"}]},{"type":"element","tag":"span","props":{"class":"ct-212337"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-941699"},"children":[{"type":"text","value":"App"}]},{"type":"element","tag":"span","props":{"class":"ct-212337"},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"class":"ct-880416"},"children":[{"type":"text","value":"request"}]},{"type":"element","tag":"span","props":{"class":"ct-212337"},"children":[{"type":"text","value":", "}]},{"type":"element","tag":"span","props":{"class":"ct-880416"},"children":[{"type":"text","value":"response"}]},{"type":"element","tag":"span","props":{"class":"ct-212337"},"children":[{"type":"text","value":") {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":2},"children":[{"type":"element","tag":"span","props":{"class":"ct-212337"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-984823"},"children":[{"type":"text","value":"const"}]},{"type":"element","tag":"span","props":{"class":"ct-212337"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-055721"},"children":[{"type":"text","value":"id"}]},{"type":"element","tag":"span","props":{"class":"ct-212337"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-984823"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-212337"},"children":[{"type":"text","value":" request.query.id "}]},{"type":"element","tag":"span","props":{"class":"ct-782603"},"children":[{"type":"text","value":"// <- read req and parsing\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":3},"children":[{"type":"element","tag":"span","props":{"class":"ct-212337"},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"class":"ct-984823"},"children":[{"type":"text","value":"try"}]},{"type":"element","tag":"span","props":{"class":"ct-212337"},"children":[{"type":"text","value":" {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":4},"children":[{"type":"element","tag":"span","props":{"class":"ct-212337"},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"class":"ct-984823"},"children":[{"type":"text","value":"const"}]},{"type":"element","tag":"span","props":{"class":"ct-212337"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-055721"},"children":[{"type":"text","value":"result"}]},{"type":"element","tag":"span","props":{"class":"ct-212337"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-984823"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"class":"ct-212337"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-984823"},"children":[{"type":"text","value":"await"}]},{"type":"element","tag":"span","props":{"class":"ct-212337"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-055721"},"children":[{"type":"text","value":"DB"}]},{"type":"element","tag":"span","props":{"class":"ct-212337"},"children":[{"type":"text","value":"."}]},{"type":"element","tag":"span","props":{"class":"ct-941699"},"children":[{"type":"text","value":"find"}]},{"type":"element","tag":"span","props":{"class":"ct-212337"},"children":[{"type":"text","value":"({ id }) "}]},{"type":"element","tag":"span","props":{"class":"ct-782603"},"children":[{"type":"text","value":"// <- DB operation\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":5},"children":[{"type":"element","tag":"span","props":{"class":"ct-212337"},"children":[{"type":"text","value":"    res."}]},{"type":"element","tag":"span","props":{"class":"ct-941699"},"children":[{"type":"text","value":"json"}]},{"type":"element","tag":"span","props":{"class":"ct-212337"},"children":[{"type":"text","value":"({ "}]},{"type":"element","tag":"span","props":{"class":"ct-782603"},"children":[{"type":"text","value":"// generate json and response\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":6},"children":[{"type":"element","tag":"span","props":{"class":"ct-212337"},"children":[{"type":"text","value":"      code: "}]},{"type":"element","tag":"span","props":{"class":"ct-055721"},"children":[{"type":"text","value":"200"}]},{"type":"element","tag":"span","props":{"class":"ct-212337"},"children":[{"type":"text","value":",\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":7},"children":[{"type":"element","tag":"span","props":{"class":"ct-212337"},"children":[{"type":"text","value":"      data: result\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":8},"children":[{"type":"element","tag":"span","props":{"class":"ct-212337"},"children":[{"type":"text","value":"    })\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":9},"children":[{"type":"element","tag":"span","props":{"class":"ct-212337"},"children":[{"type":"text","value":"  } "}]},{"type":"element","tag":"span","props":{"class":"ct-984823"},"children":[{"type":"text","value":"catch"}]},{"type":"element","tag":"span","props":{"class":"ct-212337"},"children":[{"type":"text","value":"(e) {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":10},"children":[{"type":"element","tag":"span","props":{"class":"ct-212337"},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"class":"ct-782603"},"children":[{"type":"text","value":"// ...\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":11},"children":[{"type":"element","tag":"span","props":{"class":"ct-212337"},"children":[{"type":"text","value":"  }\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":12},"children":[{"type":"element","tag":"span","props":{"class":"ct-212337"},"children":[{"type":"text","value":"}"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当程序执行到"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"await"}]},{"type":"text","value":"标识的数据库操作时, 就会在当前方法内形成阻塞, 等待数据库的返回结果. 但对于调用 App() 的方法来说, 程序则会继续向下执行(处理其他的请求)."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"整个过程的简略图大概如下:\n"},{"type":"element","tag":"img","props":{"alt":"async","src":"https://pic-base-1307984077.cos.ap-nanjing.myqcloud.com/202309101809693.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"关于协程更具体的介绍, 可以看我的这篇文章"},{"type":"element","tag":"a","props":{"href":"https://ray-d-song.com/post/1692667782462","rel":["nofollow"]},"children":[{"type":"text","value":"协程(Coroutine)和纤程(Fiber)"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"实际上这种"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"单线程+协程"}]},{"type":"text","value":"并发模型, 就是 Node.js 的并发模型.\n这几年协程的火爆, jdk21、php8 都支持了协程方案. 足以提现这种模式的优势."}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"说到这里, 有没有什么比单线程异步并发更强的方案呢?\n那就是"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"多线程+协程"}]},{"type":"text","value":", Go 就是这样的方案. Go 实现了一种更复杂的 Goroutine 到实际线程资源的映射, 使其可以以极低的配置达到恐怖的并发性能"}]}]},{"type":"element","tag":"style","children":[{"type":"text","value":".ct-984823{color:#F97583;}\n.light .ct-984823{color:#D73A49;}\n.ct-212337{color:#E1E4E8;}\n.light .ct-212337{color:#24292E;}\n.ct-941699{color:#B392F0;}\n.light .ct-941699{color:#6F42C1;}\n.ct-880416{color:#FFAB70;}\n.light .ct-880416{color:#E36209;}\n.ct-055721{color:#79B8FF;}\n.light .ct-055721{color:#005CC5;}\n.ct-782603{color:#6A737D;}"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:1694340688292.md","_source":"content","_file":"1694340688292.md","_extension":"md"}