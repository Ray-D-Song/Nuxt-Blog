[{"data":1,"prerenderedAt":509},["Reactive",2],{"1694340688292":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":5,"_empty":6,"title":7,"description":8,"cover":9,"body":10,"_type":504,"_id":505,"_source":506,"_file":507,"_extension":508},"/1694340688292","",false,"单线程并发","小短文, 讨论单线程并发和 node.js 这样异步协程模型的优势","https://pic-base-1307984077.cos.ap-nanjing.myqcloud.com/202309092206004.png",{"type":11,"children":12,"toc":502},"root",[13,34,56,76,82,99,104,123,438,449,458,470,482,497],{"type":14,"tag":15,"props":16,"children":17},"element","blockquote",{},[18],{"type":14,"tag":19,"props":20,"children":21},"p",{},[22,25],{"type":23,"value":24},"text","本文封面和思路来源于 Ruby China 2021 By 东仙队长的分享: ",{"type":14,"tag":26,"props":27,"children":31},"a",{"href":28,"rel":29},"https://www.bilibili.com/video/BV1h3411v7kq/?spm_id_from=333.999.0.0&vd_source=371668a779fa4a755fcbf62901a22d71",[30],"nofollow",[32],{"type":23,"value":33},"Ruby 高并发编程指北",{"type":14,"tag":19,"props":35,"children":36},{},[37,39,46,48,54],{"type":23,"value":38},"在",{"type":14,"tag":26,"props":40,"children":43},{"href":41,"rel":42},"https://ray-d-song.com/post/1694247812862",[30],[44],{"type":23,"value":45},"并发与并行",{"type":23,"value":47},"这篇文章中, 我假设了只有一个处理器, 这颗处理器只有一个核心的情况.\n在这种情况下, 计算机同一时间只能处理一个任务. 那么如何将这个线程利用率最大化就是",{"type":14,"tag":49,"props":50,"children":51},"code-inline",{},[52],{"type":23,"value":53},"「单线程并发」",{"type":23,"value":55},"的课题.",{"type":14,"tag":19,"props":57,"children":58},{},[59,61,67,69,74],{"type":23,"value":60},"首先我们来看看最常见的 web 应用场景, 从接收到用户请求到返回, 需要这些步骤:\n",{"type":14,"tag":62,"props":63,"children":66},"img",{"alt":64,"src":65},"web app","https://pic-base-1307984077.cos.ap-nanjing.myqcloud.com/202309092334861.png",[],{"type":23,"value":68},"\n其中",{"type":14,"tag":49,"props":70,"children":71},{},[72],{"type":23,"value":73},"DB operation",{"type":23,"value":75},"占据了最大的空间, 因为数据库操作确实是最耗时的操作.",{"type":14,"tag":77,"props":78,"children":80},"h1",{"id":79},"多线程并发",[81],{"type":23,"value":79},{"type":14,"tag":19,"props":83,"children":84},{},[85,87,92,94],{"type":23,"value":86},"我们来假设一种极端的情况, 如果一直只有一个线程在运行, 那么运行过程就会变成这样:\n",{"type":14,"tag":62,"props":88,"children":91},{"alt":89,"src":90},"单线程","https://pic-base-1307984077.cos.ap-nanjing.myqcloud.com/202309092339287.png",[],{"type":23,"value":93},"\n如果是这样的话, 我想我们这台单核的机器没几个用户就 burn out 了.\n应对这种情况, 最简单的思路就是多开几个线程, 虽然我们只有一个进程, 但当第一个线程卡在数据库操作时, 可以将控制权转移到其他线程进行操作.\n",{"type":14,"tag":62,"props":95,"children":98},{"alt":96,"src":97},"多线程","https://pic-base-1307984077.cos.ap-nanjing.myqcloud.com/202309092351360.png",[],{"type":14,"tag":77,"props":100,"children":102},{"id":101},"协程",[103],{"type":23,"value":101},{"type":14,"tag":19,"props":105,"children":106},{},[107,109,114,116,121],{"type":23,"value":108},"多线程并发, 一切看起来都很美好, 但有两个问题, 一个是计算机能启动的线程数量是有限的, 还有就是线程的切换有着客观的成本.\n那么如果我们可以自己在程序中",{"type":14,"tag":49,"props":110,"children":111},{},[112],{"type":23,"value":113},"模拟线程",{"type":23,"value":115},", 切换的不再是线程, 而是执行的程序方法. 岂不是可以用极低的成本去并发?\n这个模拟线程, 或者说",{"type":14,"tag":49,"props":117,"children":118},{},[119],{"type":23,"value":120},"轻量线程/用户线程",{"type":23,"value":122},", 就是协程.\n有了协程, 我们可以更细粒度的控制程序的执行. 以下是 node.js 协程(async异步)的例子:",{"type":14,"tag":124,"props":125,"children":130},"code",{"className":126,"code":128,"language":129,"meta":5},[127],"language-js","async function App(request, response) {\n  const id = request.query.id // \u003C- read req and parsing\n  try {\n    const result = await DB.find({ id }) // \u003C- DB operation\n    res.json({ // generate json and response\n      code: 200,\n      data: result\n    })\n  } catch(e) {\n    // ...\n  }\n}\n","js",[131],{"type":14,"tag":132,"props":133,"children":134},"pre",{},[135],{"type":14,"tag":124,"props":136,"children":137},{"__ignoreMap":5},[138,197,241,259,327,351,370,379,388,407,420,429],{"type":14,"tag":139,"props":140,"children":143},"span",{"class":141,"line":142},"line",1,[144,150,156,161,165,171,176,182,187,192],{"type":14,"tag":139,"props":145,"children":147},{"class":146},"ct-984823",[148],{"type":23,"value":149},"async",{"type":14,"tag":139,"props":151,"children":153},{"class":152},"ct-212337",[154],{"type":23,"value":155}," ",{"type":14,"tag":139,"props":157,"children":158},{"class":146},[159],{"type":23,"value":160},"function",{"type":14,"tag":139,"props":162,"children":163},{"class":152},[164],{"type":23,"value":155},{"type":14,"tag":139,"props":166,"children":168},{"class":167},"ct-941699",[169],{"type":23,"value":170},"App",{"type":14,"tag":139,"props":172,"children":173},{"class":152},[174],{"type":23,"value":175},"(",{"type":14,"tag":139,"props":177,"children":179},{"class":178},"ct-880416",[180],{"type":23,"value":181},"request",{"type":14,"tag":139,"props":183,"children":184},{"class":152},[185],{"type":23,"value":186},", ",{"type":14,"tag":139,"props":188,"children":189},{"class":178},[190],{"type":23,"value":191},"response",{"type":14,"tag":139,"props":193,"children":194},{"class":152},[195],{"type":23,"value":196},") {\n",{"type":14,"tag":139,"props":198,"children":200},{"class":141,"line":199},2,[201,206,211,215,221,225,230,235],{"type":14,"tag":139,"props":202,"children":203},{"class":152},[204],{"type":23,"value":205},"  ",{"type":14,"tag":139,"props":207,"children":208},{"class":146},[209],{"type":23,"value":210},"const",{"type":14,"tag":139,"props":212,"children":213},{"class":152},[214],{"type":23,"value":155},{"type":14,"tag":139,"props":216,"children":218},{"class":217},"ct-055721",[219],{"type":23,"value":220},"id",{"type":14,"tag":139,"props":222,"children":223},{"class":152},[224],{"type":23,"value":155},{"type":14,"tag":139,"props":226,"children":227},{"class":146},[228],{"type":23,"value":229},"=",{"type":14,"tag":139,"props":231,"children":232},{"class":152},[233],{"type":23,"value":234}," request.query.id ",{"type":14,"tag":139,"props":236,"children":238},{"class":237},"ct-782603",[239],{"type":23,"value":240},"// \u003C- read req and parsing\n",{"type":14,"tag":139,"props":242,"children":244},{"class":141,"line":243},3,[245,249,254],{"type":14,"tag":139,"props":246,"children":247},{"class":152},[248],{"type":23,"value":205},{"type":14,"tag":139,"props":250,"children":251},{"class":146},[252],{"type":23,"value":253},"try",{"type":14,"tag":139,"props":255,"children":256},{"class":152},[257],{"type":23,"value":258}," {\n",{"type":14,"tag":139,"props":260,"children":262},{"class":141,"line":261},4,[263,268,272,276,281,285,289,293,298,302,307,312,317,322],{"type":14,"tag":139,"props":264,"children":265},{"class":152},[266],{"type":23,"value":267},"    ",{"type":14,"tag":139,"props":269,"children":270},{"class":146},[271],{"type":23,"value":210},{"type":14,"tag":139,"props":273,"children":274},{"class":152},[275],{"type":23,"value":155},{"type":14,"tag":139,"props":277,"children":278},{"class":217},[279],{"type":23,"value":280},"result",{"type":14,"tag":139,"props":282,"children":283},{"class":152},[284],{"type":23,"value":155},{"type":14,"tag":139,"props":286,"children":287},{"class":146},[288],{"type":23,"value":229},{"type":14,"tag":139,"props":290,"children":291},{"class":152},[292],{"type":23,"value":155},{"type":14,"tag":139,"props":294,"children":295},{"class":146},[296],{"type":23,"value":297},"await",{"type":14,"tag":139,"props":299,"children":300},{"class":152},[301],{"type":23,"value":155},{"type":14,"tag":139,"props":303,"children":304},{"class":217},[305],{"type":23,"value":306},"DB",{"type":14,"tag":139,"props":308,"children":309},{"class":152},[310],{"type":23,"value":311},".",{"type":14,"tag":139,"props":313,"children":314},{"class":167},[315],{"type":23,"value":316},"find",{"type":14,"tag":139,"props":318,"children":319},{"class":152},[320],{"type":23,"value":321},"({ id }) ",{"type":14,"tag":139,"props":323,"children":324},{"class":237},[325],{"type":23,"value":326},"// \u003C- DB operation\n",{"type":14,"tag":139,"props":328,"children":330},{"class":141,"line":329},5,[331,336,341,346],{"type":14,"tag":139,"props":332,"children":333},{"class":152},[334],{"type":23,"value":335},"    res.",{"type":14,"tag":139,"props":337,"children":338},{"class":167},[339],{"type":23,"value":340},"json",{"type":14,"tag":139,"props":342,"children":343},{"class":152},[344],{"type":23,"value":345},"({ ",{"type":14,"tag":139,"props":347,"children":348},{"class":237},[349],{"type":23,"value":350},"// generate json and response\n",{"type":14,"tag":139,"props":352,"children":354},{"class":141,"line":353},6,[355,360,365],{"type":14,"tag":139,"props":356,"children":357},{"class":152},[358],{"type":23,"value":359},"      code: ",{"type":14,"tag":139,"props":361,"children":362},{"class":217},[363],{"type":23,"value":364},"200",{"type":14,"tag":139,"props":366,"children":367},{"class":152},[368],{"type":23,"value":369},",\n",{"type":14,"tag":139,"props":371,"children":373},{"class":141,"line":372},7,[374],{"type":14,"tag":139,"props":375,"children":376},{"class":152},[377],{"type":23,"value":378},"      data: result\n",{"type":14,"tag":139,"props":380,"children":382},{"class":141,"line":381},8,[383],{"type":14,"tag":139,"props":384,"children":385},{"class":152},[386],{"type":23,"value":387},"    })\n",{"type":14,"tag":139,"props":389,"children":391},{"class":141,"line":390},9,[392,397,402],{"type":14,"tag":139,"props":393,"children":394},{"class":152},[395],{"type":23,"value":396},"  } ",{"type":14,"tag":139,"props":398,"children":399},{"class":146},[400],{"type":23,"value":401},"catch",{"type":14,"tag":139,"props":403,"children":404},{"class":152},[405],{"type":23,"value":406},"(e) {\n",{"type":14,"tag":139,"props":408,"children":410},{"class":141,"line":409},10,[411,415],{"type":14,"tag":139,"props":412,"children":413},{"class":152},[414],{"type":23,"value":267},{"type":14,"tag":139,"props":416,"children":417},{"class":237},[418],{"type":23,"value":419},"// ...\n",{"type":14,"tag":139,"props":421,"children":423},{"class":141,"line":422},11,[424],{"type":14,"tag":139,"props":425,"children":426},{"class":152},[427],{"type":23,"value":428},"  }\n",{"type":14,"tag":139,"props":430,"children":432},{"class":141,"line":431},12,[433],{"type":14,"tag":139,"props":434,"children":435},{"class":152},[436],{"type":23,"value":437},"}",{"type":14,"tag":19,"props":439,"children":440},{},[441,443,447],{"type":23,"value":442},"当程序执行到",{"type":14,"tag":49,"props":444,"children":445},{},[446],{"type":23,"value":297},{"type":23,"value":448},"标识的数据库操作时, 就会在当前方法内形成阻塞, 等待数据库的返回结果. 但对于调用 App() 的方法来说, 程序则会继续向下执行(处理其他的请求).",{"type":14,"tag":19,"props":450,"children":451},{},[452,454],{"type":23,"value":453},"整个过程的简略图大概如下:\n",{"type":14,"tag":62,"props":455,"children":457},{"alt":149,"src":456},"https://pic-base-1307984077.cos.ap-nanjing.myqcloud.com/202309101809693.png",[],{"type":14,"tag":19,"props":459,"children":460},{},[461,463],{"type":23,"value":462},"关于协程更具体的介绍, 可以看我的这篇文章",{"type":14,"tag":26,"props":464,"children":467},{"href":465,"rel":466},"https://ray-d-song.com/post/1692667782462",[30],[468],{"type":23,"value":469},"协程(Coroutine)和纤程(Fiber)",{"type":14,"tag":19,"props":471,"children":472},{},[473,475,480],{"type":23,"value":474},"实际上这种",{"type":14,"tag":49,"props":476,"children":477},{},[478],{"type":23,"value":479},"单线程+协程",{"type":23,"value":481},"并发模型, 就是 Node.js 的并发模型.\n这几年协程的火爆, jdk21、php8 都支持了协程方案. 足以提现这种模式的优势.",{"type":14,"tag":15,"props":483,"children":484},{},[485],{"type":14,"tag":19,"props":486,"children":487},{},[488,490,495],{"type":23,"value":489},"说到这里, 有没有什么比单线程异步并发更强的方案呢?\n那就是",{"type":14,"tag":49,"props":491,"children":492},{},[493],{"type":23,"value":494},"多线程+协程",{"type":23,"value":496},", Go 就是这样的方案. Go 实现了一种更复杂的 Goroutine 到实际线程资源的映射, 使其可以以极低的配置达到恐怖的并发性能",{"type":14,"tag":498,"children":499},"style",[500],{"type":23,"value":501},".ct-984823{color:#F97583;}\n.light .ct-984823{color:#D73A49;}\n.ct-212337{color:#E1E4E8;}\n.light .ct-212337{color:#24292E;}\n.ct-941699{color:#B392F0;}\n.light .ct-941699{color:#6F42C1;}\n.ct-880416{color:#FFAB70;}\n.light .ct-880416{color:#E36209;}\n.ct-055721{color:#79B8FF;}\n.light .ct-055721{color:#005CC5;}\n.ct-782603{color:#6A737D;}",{"title":5,"searchDepth":199,"depth":199,"links":503},[],"markdown","content:1694340688292.md","content","1694340688292.md","md",1694340779006]